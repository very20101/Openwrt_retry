
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Original Code from https://github.com/ophub/amlogic-s9xxx-openwrt
#

name: Build Original-config

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
  #schedule:
   # - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  #FEEDS_CONF: openwrt.feeds.conf.default
  CONFIG_FILE: config/.config202503120003
  DIY_P1_SH: ARMv8/diy-part01.sh
  DIY_P2_SH: ARMv8/diy-part02.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: OpenWrt-NVA
  PRODUCT_NAME: OpenWrt-NVA
  OPENWRT_TAG: OpenWrt-NVA
  
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Check server performance
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8272CL"
        echo "已知性能不足CPU型号：8171M,E5系列"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo swapoff -a && sudo rm -f /swapfile /mnt/swapfile
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        (sudo -E apt-get -y update
        sudo -E apt-get -y install clang rename $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean 
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown ${USER}:${GROUPS} /workdir
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: Clone source code
      working-directory: /workdir
      run: 
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author:%an<br/>date:%cd<br/>commit:%s<br/>commit hash:%H"
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        echo "VERSION_INFO=$(echo $VERSION_INFO)" >> $GITHUB_OUTPUT
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        
    #- name: toolchain cache
     # uses: klever1988/cachewrtbuild@main
      #with:
       # ccache: 'true'
       # prefix: ${{ github.workspace }}/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        #make distclean
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        df -Th
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make defconfig
        git clone -b main https://github.com/very20101/openwrt_retry packages/op-retry
        #rm -rf feeds/packages/lang/ruby
        #cp -rf packages/op-retry/pkg_modified/ruby feeds/packages/lang/ruby
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "build_tag=OpenWrt_Armvirt_$(date +"%m.%d.%H%M")" >> ${GITHUB_OUTPUT}
        echo "build_tag=ARMv8_origin_$(date +"%m.%d.%H%M")" >> ${GITHUB_OUTPUT}
        
    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@main
      #if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      with:
        name: OpenWrt-NVA
        tag: ${{ env.OPENWRT_TAG }}
        makeLatest: true
        replacesArtifacts: true
        artifacts: openwrt/bin/targets/*/*/*rootfs.tar.gz
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Clean up server space
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      run: |
         cd openwrt/
         rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
         df -hT $PWD 
        
    - name: Package Armvirt as OpenWrt
      uses: unifreq/openwrt_packit@master
      env:
        #OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        OPENWRT_ARMVIRT: openwrt-armvirt/*rootfs.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_VERSION_NAME: 5.15.88
        
    - name: Upload Firmware to Release
      uses: ncipollo/release-action@main
      with:
        tag: ARMv8_origin_${{ env.PACKAGED_OUTPUTDATE }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
         This is OpenWrt firmware for Armvirt 64 
          * Firmware information
          自用精简固件，常用插件较少
          Default IP: 192.168.1.100
          Default username: root
          Default password: password
